Note pour la Creation du Eshop

1 Creation du projet avec Symfony :

symfony console new Eshop -- full

Cette commande nous permet de créer un application avec tout les outils necessaires.

Pour verifer que tout fonctionne bien je vais lancé le projet.
Je me rend dans la racide du Projet et je tape la commande "Symfony serve".

La le serveur interne de Symfony ce lance et l'application et disponible a l'adresse " https://127.0.0.1:8000"

Comme nous le pouvons constaté nous avons l'ecran d'acceuille classique de tout projet Symfony.

Pour pouvoir créer une application avec differente pages nous devons créer des routes  afin d'acceder a ces differentes pages .

Par exemple la route /home.

Pour cela nous allons utilisé la commande "Symfony console make:controller ".
Comme vous allez pouvoir le constaté.

Suite a la creation de notre controller , que nous avons nomé HomeController. Nous ponvons constaté la creation du repertoire Home dans le dossior "Templates".

Ce dossier "Home" Contient le rendu HTML de notre controlleur. 

La Classe HomeController contient la Logique de notre Controlleur.

Le serveur Web de Symfony va ecouté les requetes Http et quand on va appelé la route "\home".
Celui si va cherche le controlle qui repond a cette requete.

<-------------------------------------------------------------------------------------------------------------------------->

=> Creation de la d'inscription.

Pour creer la page d'inscription j'utilise la console. avec la commande "symfony console make:controlle"

et j'appel cette route "RegisterController".

apres cela je vais modifier le template afin d'y integre le formulaire d'inscription.
Je vais rejouter une condition If afin de ne plus avoir mon carousel dans la page d'inscription.

Dans le template "base.html.twig je rajoute {% if block('carousel') is define %} et {% endif %}

Suite a ces manipulations je n'aurai plus mon caroussel ni sur ma page d'acceuille ni sur la dans les autres pages.

Pour rajouter le carousel dans les pages desirés, j'ai qu'a rajoute la notation {% block carousel  %} et le fermé en utilissant {% endblock %}.

Afin d'avoir un pages plus esthetique nous allons rajouter une class mt-5
 a la div " container-fluid marketing " avec une condition " if  " {% if block('caroussel') is not defined  %} mt-5 {% endif %} "
 cela nous permet d'avoir une marge entre le carousel et la div qui est en dessous.
 Cette marge ne sera rajouter uniquement si le block carousel n'est pas definie.

Apres la creation du template , nous allons creer le formulaire.

nous allons toujours faire appel a notre outils " symfony console make:form " 

j'indique le nom du formulaire : register
apres il me demande avec quel entité je veux faire le liens . Dans mon cas c'est la Class User .

Suite a cela symfony va nous creer un fichier src/Form/registertype

Dans la Class registertype Nous avons une methode buildForm. Qui sera en charge de créer notre formulaire.
dans cette derniere methode nous avons $builder, qui contient les differents champs!!!

-> email
->password

Revenons a notre Class RegisterController, pour pouvoir créer un utilisateur je dois creer instancier une class user .

en creant une variable $user = new User(), suite a ca je vais injecté le formulaire dans la page. Avec la methode $this->creatForm() dans cette methode j'injecte la class de mon formulaire registertype et en Deuxieme parametres la class au quel ce formulaire est lier.

apres cela je n'es plus qu'a injecté mon formulaire dans le template.
en indiquant comme 2eme parametres de la methode render . En fesant appel a la methode createView()

Suite a cela je vais dans mon template et je rajoute mon formulaire avec " {{ form(form)}} "












<-------------------------------------------------------------------------------------------------------------------------->
=> Creation de La page d'authentification.

Pour Creer la page de connexion nous allons utilise la commande "symfony console make:auth.
- Cette commande va nous permettre de Creer un formulaire d'authetification, afin que l'utilisateur puise ce connect.
Lorsque nous executons la commande nous avons deux Options : 

-Empty authentificator
-Login form authentificator

Dans notre cas nous allons utilisé la deuxieme option. "Login form authentificator".

Lorsque nous utilisons cette Options symfony va faire plusieurs choses pour nous.

1 Elle va créer un SecurityController les routes de Login et de Logout

2 Ainsi qu'une Class Authenticator

3 Mais aussi qu'une Class "LoginFormAuthenticator"

Dans SecurityController je vais pouvoir indiqué les differentes routes : 

- La Route de login " /connexion"
ainsi que la Route logout "/deconnection"

<------------------------------------------------------------------------------------------------------------------------->

=> Creation du formulaire d'inscription

pour la creation de formulaire je vais utilisé la commande " symfony Console make form ".

Suite a cela j'ai une nous dossier qui ce créer " src/form/registertype".

Cette nouvelle entité sera lier a notre Class User.
Cette nouvelle classe nous permettra de construire et customiser notre Formulaire d'inscription.

Apres la creation du formulaire, je vais l'instancier dans la pages d'inscription. "RegisterController"

dans la fonction index de la classe registre controller j'instancie un la class user afin de creer un utilisateur lors de l'execusion du formulaire.
Je creer une variable $user et je lui injecte la class user.

Suite a cela j'implemente aussi la class registertype en fesant appel a la methode createForme.
En fesant appel a cette methode je dois lui indiqué aussi la class a quelle le form et lier.
Dans notre cas c'est la class User .

apres cela, je vais injecté le formulaire dans la vue, via la variable $form et un tableau.
La méthode qui permet la creation du formulaire dans la vue : " $form->createView()"


- "return $this->render('registre/index.html.twig', ['form' => $form->creatView() ]);

quand j'ai fais ca je vais implemente mon formulaire dans mon template avec la variable {{ form(form)}}


Je peu constaté que le formulaire est bien implémenté dans la pages d'inscription. Mais le resultat n'est pas super beau.

En consultant la documentation Symfony j'ai pu constaté qu'il etait tout a fait possible customiser le formulaire.

en rajoutant "form_themes: ['bootstrap_5_layout.html.twig']" dans le fichier app/config/packages/twig.yaml.

Cela nous permet d'avoir de beau formulaire, au designe de bootstrap.


Apres cela nous allons utilise le symfony console make:entity

J'utilise cette commande afin de modifier ma class User.
Je fais cela afin d'ajouter de nouvelles proprieté.

je rajoute la proprieté :

-firstname => de type varchar de 255 caracteres, ce champ ne peu pas etre nul dans la bdd

-Lastname => de type varchar de 255 caracteres, ce champ ne peu pas etre nul dans la bdd

apres avoir rajouter ces nouvelles proprietées a ma Class User je vais effectué une migration pour mettre a jour ma bdd

- Apres cela je vais faire un "Symfony console doctrine:migration:migrate

suite a cela je peu modifier mon registertype et ajouter de nouveau champ.
dans $builder

comme dans ma class je vais ajouter firstname en rajoutant un TexteType. cela indique que ce champ ne sera que du texte et rien d'autre.
Dans le 3eme parametres de la methode add. je peu ajouter le label du input. Dans notre cas ce sera "Votre prénom".

Dans le 4eme parametres je peu ajouter le parametre 'attr' et comme parametre un tableau.
Le tableau aura comme clef 'placeholder' et comme valeur "Merci de saisir votre prénom"

Je repete cela sur les differents input du formulaire afin le resultat souhaité.



Suite a cela on va crere une derniere methode Add afin de creer le bouton de soumission de formulaire.

"->add('submit', SubmitType, ['label' => "s'incrire])

le 3eme parametre de la methode add me permet de personnaliser le bouton submit du formulaire.

<==========================================================================================================================>

La je vais persister les données du formulaires dans la base de données .

avant cela je vais verifer si le fomulaire est valide (Par rapport aux contrainte que nous avons choisi )et si il est soumission.
Avec la condition " if ($form->isSubmitted() && $form->isValid()) ".
si les conditions sont vrai on peut :

->Injecté les données du formulaire dans la variable User que nous avons créer precedament .

suite a cela il ne me reste plus qu'a persiter les données dans la BDD .
"$this->entityManager->persist($user);
 $this->entityManager->flush();"

Apres cela il me reste plus qu'a encoder les password
avant de faire cela je vais verifer la configuration de mon fichier security.yaml

Je verifer la methode de hashage "algorithm: auto", signifie la meuiller me disponible actuelement.

Pour hasher le mot de passes je vais utiliser l'injection de dependance.

Dans la methode index nous allons injecté l'interface "UserPasswordHasherInterface" .
Qui sera indispensable pour hasher les mdps.

Suite a cela je vais crée une variable $password.
je vais incrementé cette variable avec la données que j'ai recupere de mon formulaire.

Dans notre cas  $user->getPassword().
Mais avant cela je dois hasher cette valeur avec la methode "$encoder->hashPassword" , qui vient de "UserPasswordHasherInterface"

apres avoir hasher mon mot de passe j'ai plus qu'a le reinjecté je avec la methode
$user->setPassword($password)





<------------------------------------------------------------------------------------------------------------------------->

=> Creation des pages d'acceuille de l'utilisateur :

Apres L'authentification, l'utilisateur aura besoin d'avoir accés a ca page personnel. Pour cela nous allons créer une Route " AccountControlleur " al'aide de la commande "Symfony console make:controller" .

Suite a ca , Symfony ma creé un controlleur "AccountControlleur" mais aussi un Template twig  dans le repertoire templates/account/index.html.twig.

Dans ce Controlleur, nous avons une route qui indique "/account". Que je vais modifié afin de l'appelé "/compte".

Afin d'attribué un role a l'utilisateur connecté nous allons modifié quelques parametres.

dans app/config/packages/security.yaml

Tout d'abord nous allons 
Nous pouvons attribué un role a l'utilisateur " user " ou "admin", nous allons attribué un role grace a un chemin.
donc tout les urls qui contiennent "/compte" , les utilisateurs connecté avec la route "/compte" auront un roles.
Pour cela nous allons de commenté la ligne "Roles users" et modifier le path "^/compte".

<-------------------------------------------------------------------------------------------------------------------------->

=> Modification de la pages d'acceuille, j'ai modifier le template de la pages d'acceuille


<-------------------------------------------------------------------------------------------------------------------------->

=> Ajout de contrainte dans le formulaire

Pour evité certaines erreurs des utilisateurs. Je vais ajouter des contraintes dans le fomulaire afin d'obliger les differents utilisateurs a saisir les informations souhaitées.

Dans notre cas nous allons utilisé l'attribu "constraints" pour faire cela.
Dans notre premier "input" qui est le prenom nous allons mettre une contraite de longueur dans cette input.
En utilisant l'option "new Length('min' => 2,'max' => 30)" dans les parametres on indiques que nous voulons par exemples un minimum de 2 caracteres et un maximum de 30 caracteres.

Je vais insere differentes contraintes sur les elements du  formulaire, afin d'avoir un formulaire exploitable.

Je vais aussi profiter pour traduire les erreurs du formulaires en francais, car pour l'instant ils sont en anglais
pour ce faire je vais dans /config/packages/translation.yaml. Dans l'option default_local: fr, a la place de fr .

<==========================================================================================================================>

Creation du formulaire d'authentification:

Pour cela , je vais utiliser la commande "symfony console make: auth".
Suite a l'execusition de cette commande, symfony me propose plusieur option 
"quel type de login authentification je souhaite "

- Un formulaire vide ou un "login form authentificator"
Dans mon cas j'au besoin d'un login form authentificator

Apres ca Symfony me demande le Nom de ma Class. Je vais l'appelé LoginFormAuthenticator.
Suite a cela je dois indique le nom de la du controlleur, moi je vais 'apple SecurityController.

Je valide est symfony me crée tout cela.

<==========================================================================================================================>

=> Creation de l'espace Membre

Pour la creation de l'espace membre je vais utilisé la commande "symfony console make:controller".
Suite a cela j'ai mon controlleur qui a etait génére.

Cela va me permet de crée un espace personnel de l'utilisateur.

Pour cela je vais me reconfigure le template créer en meme temps que le controller .

dans le Templateje vais insere un "block content" avec un element <h1>Mon Compte </h1>

Je rajoute un element <p> "paragraphe" avec un petit texte de bienvenue.

Dans ce petit text je vais inclure le prenom de l'utilisateur via la variable "app.user.firstname" .

apres cela je vais ajouter une redirection au SecurityController

"return new RedirectResponse($this->urlGenerator->generate('account'));"

Cela va permettre de redirigé l'utilisateur apres la connexion. Sur ca page "account"





